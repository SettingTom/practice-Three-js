<!DOCTYPE html>
<html>
  <head>
    <title>PracticeThreeJs</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
     <meta charset="utf-8"/>
  <script src="https://unpkg.com/three@0.137.4/build/three.min.js"></script>
  <script src="https://unpkg.com/three@0.137.4/examples/js/controls/OrbitControls.js"></script>
  <script src="https://unpkg.com/three@0.137.4/examples/js/loaders/STLLoader.js"></script>
  <script defer src="https://pyscript.net/alpha/pyscript.js"></script>
  <link rel="stylesheet" href="https://pyscript.net/alpha/pyscript.css" />
    <%# <script>
      // ページの読み込みを待つ
      window.addEventListener('DOMContentLoaded', init);

      function init() {
        // サイズを指定
        const width = 960;
        const height = 540;

        // レンダラーを作成
        const canvasElement = document.querySelector('#myCanvas')
        const renderer = new THREE.WebGLRenderer({
          canvas: canvasElement,
        });
        renderer.setSize(width, height);

        // シーンを作成
        const scene = new THREE.Scene();

        // カメラを作成
        const camera = new THREE.PerspectiveCamera(45, width / height, 1, 10000);
        camera.position.set(0, 0, 1000);

        // カメラコントローラーを作成
        const controls = new THREE.OrbitControls(camera, canvasElement);

        // 形状とマテリアルからメッシュを作成します
        const mesh = new THREE.Mesh(
          new THREE.BoxGeometry(300, 300, 300),
          new THREE.MeshNormalMaterial());
        scene.add(mesh);

        tick();

        // 毎フレーム時に実行されるループイベントです
        function tick() {
          // レンダリング
          renderer.render(scene, camera);
          requestAnimationFrame(tick);
        }
      }
    </script>

        <script src="stl_viewer.min.js"></script>        
        <script>
            var stl_viewer=new StlViewer
            (
                document.getElementById("stl_cont"),
                {
                    models:
                    [
                        {filename:"counter.stl"}
                    ]
                }
            );
        </script> %>

  </head>
  <body>
    <py-env>
        <%# - numpy
        - numpy-stl
        - matplotlib
        - pandas
        - stl
        - meth %>
        <%# - mplot3d %>
        <%# - pyvista %>
    </py-env>
    <py-script>
      <%# print('hello world') %>

      <%# import numpy as np

      arr1 = np.array([[1,2],[3,4]])
      arr2 = np.array([[5,6],[7,8]])
      arr3 = arr1.dot(arr2)
      print('arr1:',arr1)
      print('arr2:',arr2)
      print('arr3:',arr3) %>


      <%# import pyvista as pv
      
      filename = 'counter.stl'
      mesh = pv.read(filename)
      cpos = mesh.plot()
 %>

      <%# from stl import mesh
      from mpl_toolkits import mplot3d
      import matplotlib.pyplot as plt
      import numpy as np

      def show(data):
          figure = plt.figure()
          axes = mplot3d.Axes3D(figure)

          axes.add_collection3d(mplot3d.art3d.Poly3DCollection(data.vectors))
          scale = data.points.flatten(-1)
          axes.auto_scale_xyz(scale, scale, scale)
          plt.show()

      data = mesh.Mesh.from_file('counter.stl')

      show(data) %>
    </py-script>
    <%= yield %>
  </body>
</html>
