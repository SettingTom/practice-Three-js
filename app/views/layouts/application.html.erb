<!DOCTYPE html>
<html>
  <head>
    <title>PracticeThreeJs</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
     <meta charset="utf-8"/>
  <script src="https://unpkg.com/three@0.137.4/build/three.min.js"></script>
  <script src="https://unpkg.com/three@0.137.4/examples/js/controls/OrbitControls.js"></script>
  <script>
    // ページの読み込みを待つ
    window.addEventListener('DOMContentLoaded', init);

    function init() {
      // サイズを指定
      const width = 960;
      const height = 540;

      // レンダラーを作成
      const canvasElement = document.querySelector('#myCanvas');
      const renderer = new THREE.WebGLRenderer({
        canvas: canvasElement,
      });
      renderer.setSize(width, height);

      // シーンを作成
      const scene = new THREE.Scene();

      // カメラを作成
      const camera = new THREE.PerspectiveCamera(45, width / height);
      // カメラの初期座標を設定
      camera.position.set(0, 0, 1000);

      // カメラコントローラーを作成
      const controls = new THREE.OrbitControls(camera, canvasElement);

      // 形状とマテリアルからメッシュを作成します
      const mesh = new THREE.Mesh(new THREE.BoxGeometry(300, 300, 300), new THREE.MeshNormalMaterial());
      scene.add(mesh);

      tick();

      // 毎フレーム時に実行されるループイベントです
      function tick() {
        // レンダリング
        renderer.render(scene, camera);
        requestAnimationFrame(tick);
      }
    }
  </script>
  </head>
  <body>
    <%= yield %>
  </body>
</html>
