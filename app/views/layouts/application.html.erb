<!DOCTYPE html>
<html>
  <head>
    <title>PracticeThreeJs</title>
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>

    <%= stylesheet_link_tag 'application', media: 'all', 'data-turbolinks-track': 'reload' %>
    <%= javascript_pack_tag 'application', 'data-turbolinks-track': 'reload' %>
     <meta charset="utf-8"/>
  <script src="https://unpkg.com/three@0.137.4/build/three.min.js"></script>
  <script src="https://unpkg.com/three@0.137.4/examples/js/controls/OrbitControls.js"></script>
  <script src="https://unpkg.com/three@0.137.4/examples/js/loaders/STLLoader.js"></script>
  <script defer src="https://pyscript.net/alpha/pyscript.js"></script>
  <link rel="stylesheet" href="https://pyscript.net/alpha/pyscript.css" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/105/three.min.js"></script>
      <%# <py-env> %>
        <%# - numpy %>
        <%# - numpy-stl %>
        <%# - matplotlib %>
        <%# - pandas %>
        <%# - stl %>
        <%# - meth %>
        <%# - mplot3d %>
        <%# - pyvista %>
    <%# </py-env> %>
    <%# <script>
      // ページの読み込みを待つ
      window.addEventListener('DOMContentLoaded', init);

      function init() {
        // サイズを指定
        const width = 960;
        const height = 540;

        // レンダラーを作成
        const canvasElement = document.querySelector('#myCanvas')
        const renderer = new THREE.WebGLRenderer({
          canvas: canvasElement,
        });
        renderer.setSize(width, height);

        // シーンを作成
        const scene = new THREE.Scene();

        // カメラを作成
        const camera = new THREE.PerspectiveCamera(45, width / height, 1, 10000);
        camera.position.set(0, 0, 1000);

        // カメラコントローラーを作成
        const controls = new THREE.OrbitControls(camera, canvasElement);

        // 形状とマテリアルからメッシュを作成します
        const mesh = new THREE.Mesh(
          new THREE.BoxGeometry(300, 300, 300),
          new THREE.MeshNormalMaterial());
        scene.add(mesh);

        tick();

        // 毎フレーム時に実行されるループイベントです
        function tick() {
          // レンダリング
          renderer.render(scene, camera);
          requestAnimationFrame(tick);
        }
      }
    </script>

        <script src="stl_viewer.min.js"></script>        
        <script>
            var stl_viewer=new StlViewer
            (
                document.getElementById("stl_cont"),
                {
                    models:
                    [
                        {filename:"counter.stl"}
                    ]
                }
            );
        </script> %>

    <%# <table>
          <tr><td align = right>STL file :
      <td><form name="test">
          <input type="file" id="selfile"><br>
      </form></td>
          <tr><td align = right>STL type (ASCII / Binary) : </td><td><div id="stl-type">---</div></td>
          <tr><td align = right>Number of polygons : </td><td><div id="polynum">---</div></td>
      </table><br>
      <canvas id="myCanvas"></canvas>

    <script>
      window.onload = function() {
	  init();
      }

      var elem, xspeed=.1, yspeed=.1;
      var width = 800;
      var height = 800;
      var obj, scene, camera, renderer, motion;

      function init() {
	  initScene();

	  // STL 未ロード時の図形
	  const geometry = new THREE.TorusKnotBufferGeometry( .5, 0.15, 200, 32 );
	  const material = new THREE.MeshNormalMaterial();
	  obj = new THREE.Mesh(geometry, material);
	  scene.add(obj);

	  tick();
      }

      function initScene() {
	  // シーンを作成
	  scene = new THREE.Scene();
	  camera = new THREE.PerspectiveCamera(40, width / height); //画角 40度，アスペクト比 width / height

	  // レンダラーを作成
	  renderer = new THREE.WebGLRenderer( { canvas: document.querySelector('#myCanvas') } );
	  renderer.setPixelRatio(window.devicePixelRatio);
	  renderer.setSize(width, height);

	  // カメラを作成
	  camera.position.set(0, 0, +3); // カメラは原点から 3 離す
      }

      // マウスでの回転速度の指定
      var mouseDown = 0;
      var canvas = document.getElementById('myCanvas');
      canvas.addEventListener("mousedown", function(e){
	  mouseDown = 1;
	  xspeed = e.offsetX / width - 0.5;
	  yspeed = e.offsetY / height - 0.5;
      }, true);
      canvas.addEventListener("touchstart", function(e){
	  mouseDown = 1;
	  xspeed = Number(e.changedTouches[0].pageX) / width - 0.5;
	  yspeed = Number(e.changedTouches[0].pageY) / height - 0.5;
      }, true);
      canvas.addEventListener("mouseup", function(e){
	  mouseDown = 0;
	  xspeed = 0;
	  yspeed = 0;
      }, true);
      canvas.addEventListener("touchend", function(e){
	  mouseDown = 0;
	  xspeed = 0;
	  yspeed = 0;
      }, true);
      canvas.addEventListener("mousemove", function(e){
	  if(mouseDown) {
	      xspeed = e.offsetX / width - 0.5;
	      yspeed = e.offsetY / height - 0.5;
	  }
      }, true);
      canvas.addEventListener("touchmove", function(e){
	  xspeed = Number(e.changedTouches[0].pageX) / width - 0.5;
	  yspeed = Number(e.changedTouches[0].pageY) / height - 0.5;
      }, true);

      // 毎フレーム時に実行されるループイベント
      function tick() {
	  obj.rotation.x += yspeed/8
	  obj.rotation.y += xspeed/8;
	  renderer.render(scene, camera); // レンダリング
	  motion = requestAnimationFrame(tick); // 再度の呼び出しを設定（glutPostRedisplay みたいなものか？）
      }

      //ダイアログでファイルが選択されると，ファイルを読み込む
      document.getElementById("selfile").addEventListener("change",function(evt){
	  cancelAnimationFrame(motion); //動きを止める．これがないとどんどん回転が速くなる
	  initScene();

	  var file = evt.target.files;
	  var reader = new FileReader();  //FileReaderの作成
	  reader.readAsText(file[0]);	  //テキスト形式で読み込む

	  //読込終了後の処理
	  reader.onload = function(ev){
	      var geometry = new THREE.Geometry(); //新しい geometry を用意
	      var cols = reader.result.split('\n');
	      
	      if(cols[0].indexOf("solid") == -1) { // binary STL の読み込み
		  var reader2 = new FileReader();  //FileReaderの作成
		  reader2.readAsArrayBuffer(file[0]);	  //テキスト形式で読み込む

		  reader2.onload = function(ev2) {
		      var dv = new DataView(reader2.result);
		      polynum = dv.getUint32(80, true);
		      for(var i = 0; i < polynum; i++) {
			  geometry.vertices.push(new THREE.Vector3(
			      dv.getFloat32(84 + i * 50 + 12, true),
			      dv.getFloat32(84 + i * 50 + 16, true),
			      dv.getFloat32(84 + i * 50 + 20, true)
			  ));
			  geometry.vertices.push(new THREE.Vector3(
			      dv.getFloat32(84 + i * 50 + 24, true),
			      dv.getFloat32(84 + i * 50 + 28, true),
			      dv.getFloat32(84 + i * 50 + 32, true)
			  ));
			  geometry.vertices.push(new THREE.Vector3(
			      dv.getFloat32(84 + i * 50 + 36, true),
			      dv.getFloat32(84 + i * 50 + 40, true),
			      dv.getFloat32(84 + i * 50 + 44, true)
			  ));
			  geometry.faces.push( new THREE.Face3( i*3, i*3+1, i*3+2)); // ３角形を面として登録
		      }
		      document.getElementById("stl-type").innerHTML = "Binary";
		      document.getElementById("polynum").innerHTML = polynum;
		      setupScene();
		  }
	      }
	      else { // ASCII STL の読み込み
		  var j = 0;
		  for(var i = 0; i < cols.length; i++) {
		      cols[i] = cols[i].replace(/^\s+/g,''); // 行頭の空白文字を削除
		      var data = cols[i].split(/\s+/); //空白文字で区切る
		      if(cols[i].indexOf('vertex') != -1) {
			  // geometry に頂点を追加
		   	  geometry.vertices.push(new THREE.Vector3(Number(data[1]), Number(data[2]), Number(data[3])));
			  j++;
		      }
		      if(cols[i].indexOf('endloop') != -1) {
			  geometry.faces.push( new THREE.Face3( j-3, j-2, j-1 ) ); // ３角形を面として登録
		      }
		  }
  		  document.getElementById("stl-type").innerHTML = "ASCII";
		  document.getElementById("polynum").innerHTML = j/3;
		  setupScene();
	      }

	      function setupScene() {
		  geometry.computeFaceNormals(); // ３角形の法線ベクトルを自動計算
		  geometry.computeBoundingSphere(); // ３角形を内包する球を自動生成
		  geometry.center(); //物体の中心を原点に
		  var scale = 1 / geometry.boundingSphere.radius; // 大きさを正規化する
		  geometry.scale(scale, scale, scale);
		  
		  // 素材の設定．法線ベクトルの向きがそのまま RGB 色になるような機能を利用
		  var material = new THREE.MeshNormalMaterial({ side: THREE.DoubleSide }); // ポリゴンが裏面からでも表示されるようにする

		  // 形状（geometry) と，素材（material）を組み合わせて mesh のオブジェクトを作る
		  obj = new THREE.Mesh(geometry, material);
		  scene.add(obj); // mesh オブジェクトをシーンに追加
		  
		  tick(); //一度呼び出しておく
	      }
	  }
      },false);
    </script> %>

  </head>
  <body>
    <%# <py-script> %>
      <%# print('hello world') %>

      <%# import numpy as np

      arr1 = np.array([[1,2],[3,4]])
      arr2 = np.array([[5,6],[7,8]])
      arr3 = arr1.dot(arr2)
      print('arr1:',arr1)
      print('arr2:',arr2)
      print('arr3:',arr3) %>


      <%# import pyvista as pv
      
      filename = 'counter.stl'
      mesh = pv.read(filename)
      cpos = mesh.plot()
 %>

      <%# from stl import mesh
      from mpl_toolkits import mplot3d
      import matplotlib.pyplot as plt
      import numpy as np

      def show(data):
          figure = plt.figure()
          axes = mplot3d.Axes3D(figure)

          axes.add_collection3d(mplot3d.art3d.Poly3DCollection(data.vectors))
          scale = data.points.flatten(-1)
          axes.auto_scale_xyz(scale, scale, scale)
          plt.show()

      data = mesh.Mesh.from_file('counter.stl')

      show(data)
    </py-script> %>


    <%= yield %>
  </body>
</html>
